# adapted from https://github.com/s10wen/dotfiles/blob/master/.bash_prompt
function git_info() {
    # check if we're in a git repo
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # quickest check for what branch we're on
    branchName=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo -e "*")

    branchNameAndStatus="$branchName$dirty"
    echo -e "${1}${branchNameAndStatus}"
            
    #echo -e "${1}${branchName}"
}

# adapted from https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
prompt_git() {
	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return
	
	local s=''
	local branchName=''
		
	# check if the current directory is in .git before running git checks
	if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

		# Ensure the index is up to date.
		git update-index --really-refresh -q &>/dev/null

		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+'
		fi

		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!'
		fi
	fi
	
	branchName=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
		
	echo -e "${1}${branchName}${2}${s}"
}

violet="\e[1;35m"
white="\e[1;37m"
resetC="\e[0m";

#PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h\[\033[0m\](\$(date -j +'%H:%M'), \$(python /usr/local/bin/used-mem.py))"

freeDisk=`[[ "$(df -P -kHl | head -2 | tail -1)" =~ [[:space:]]*([0-9]+%) ]] && echo ${BASH_REMATCH[1]}`
PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h\[\033[0m\](\$(date -j +'%H:%M'), \$(python /usr/local/bin/used-mem.py), â’¹ \$freeDisk)"
PS1+=":\[\033[33;1m\]\w\[\033[m\]"
#PS1+="\$(prompt_git \" on \[${violet}\]\" \"\[${white}\]\")"

PS1+="\$(git_info \" on \[${violet}\]\")"	## Not as informative, but faster
PS1+="\[${resetC}\]\n\$ "
export PS1

export CLICOLOR=1
export LSCOLORS=GxFxBxDxCxegedabagacad

export HISTSIZE=100000
export HISTFILESIZE=100000
shopt -s histappend
export PROMPT_COMMAND="history -a;history -c;history -r;$PROMPT_COMMAND"