# adapted from https://github.com/s10wen/dotfiles/blob/master/.bash_prompt
git_info() {
    # check if we're in a git repo
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # quickest check for what branch we're on
    branchName=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo -e "*")

    branchNameAndStatus="$branchName$dirty"
    echo -e "${1}${branchNameAndStatus}"
            
    #echo -e "${1}${branchName}"
}

# adapted from https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
git_prompt() {
	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return
	
	local s=''
	local branchName=''
		
	# check if the current directory is in .git before running git checks
	if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

		# Ensure the index is up to date.
		git update-index --really-refresh -q &>/dev/null

		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+'
		fi

		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!'
		fi
	fi
	
	branchName=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
		
	echo -e "${1}${branchName}${2}${s}"
}

violet="\e[1;35m"
white="\e[1;37m"
resetC="\e[0m"

export CLICOLOR=1
export LSCOLORS=GxFxBxDxCxegedabagacad

export HISTSIZE=100000
export HISTFILESIZE=100000
shopt -s histappend

_batt_prompt() {
	_battery_charge() {
		echo `/usr/local/bin/battery-charge.py` 2>/dev/null
	}
	PS1R="$(_battery_charge)"
	
	PS1L="\[\033[96m\]\u\[\033[m\]@\[\033[32m\]\h\[\033[0m\]($(date -j +'%H:%M'), $(python /usr/local/bin/used-mem.py))"
	PS1L+=":\[\033[33;1m\]\w\[\033[m\]"
	#PS1+="\$(git_prompt \" on \[${violet}\]\" \"\[${white}\]\")"
	PS1L+="\$(git_info \" on \[${violet}\]\")\[${resetC}\]"	## Not as informative, but faster
	PS1LFINAL="\[\033[31;1m\][$(todo.sh | wc -l | sed -e's/ *//' | xargs -I{} expr {} - 2)]\[${resetC}\]$PS1L"
	
	compensate=32
	PS1=$(printf "%*s\r%s" "$(($(tput cols)+${compensate}))" "$PS1R" "$PS1LFINAL")
	PS1+="\n\$ "
}

_nobatt_prompt() {	
	PS1L="\[\033[96m\]\u\[\033[m\]@\[\033[32m\]\h\[\033[0m\]($(date -j +'%H:%M'), $(python /usr/local/bin/used-mem.py))"
	PS1L+=":\[\033[33;1m\]\w\[\033[m\]"
	#PS1+="\$(git_prompt \" on \[${violet}\]\" \"\[${white}\]\")"
	PS1L+="\$(git_info \" on \[${violet}\]\")\[${resetC}\]"	## Not as informative, but faster
	PS1LFINAL="\[\033[31;1m\][$(todo.sh | wc -l | sed -e's/ *//' | xargs -I{} expr {} - 2)]\[${resetC}\]$PS1L"
	PS1="$PS1LFINAL"
	PS1+="\n\$ "
}

if [[ "$SHOW_BATTERY" == "TRUE" ]]; then
	export PROMPT_COMMAND="update_terminal_cwd; history -a;history -c;history -r;_batt_prompt"
else
	export PROMPT_COMMAND="update_terminal_cwd; history -a;history -c;history -r;_nobatt_prompt"
fi